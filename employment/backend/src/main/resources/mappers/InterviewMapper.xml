<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gr.geias.repository.InterviewRepository">

    <resultMap id="BaseResultMap" type="com.gr.geias.model.Interview">
        <id column="id" property="id" />
        <result column="resume_id" property="resumeId" />
        <result column="position_id" property="positionId" />
        <result column="status" property="status" />
        <result column="remarks" property="remarks" />
        <result column="interview_time" property="interviewTime" />
        <result column="location" property="location" />
        <result column="interviewer" property="interviewer" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>
    
    <resultMap id="ExtendedResultMap" type="com.gr.geias.model.Interview" extends="BaseResultMap">
        <result column="resume_name" property="resumeName" />
        <result column="position_name" property="positionName" />
        <result column="company_name" property="companyName" />
    </resultMap>
    
    <sql id="Base_Column_List">
        id, resume_id, position_id, status, remarks, interview_time, location, interviewer, create_time, update_time
    </sql>
    
    <insert id="insert" parameterType="com.gr.geias.model.Interview" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO tb_interview (
            resume_id, position_id, status, remarks, interview_time, location, interviewer, create_time, update_time
        ) VALUES (
            #{resumeId}, #{positionId}, #{status}, #{remarks}, #{interviewTime}, #{location}, #{interviewer}, NOW(), NOW()
        )
    </insert>
    
    <update id="update" parameterType="com.gr.geias.model.Interview">
        UPDATE tb_interview
        <set>
            <if test="resumeId != null">resume_id = #{resumeId},</if>
            <if test="positionId != null">position_id = #{positionId},</if>
            <if test="status != null">status = #{status},</if>
            <if test="remarks != null">remarks = #{remarks},</if>
            <if test="interviewTime != null">interview_time = #{interviewTime},</if>
            <if test="location != null">location = #{location},</if>
            <if test="interviewer != null">interviewer = #{interviewer},</if>
            update_time = NOW()
        </set>
        WHERE id = #{id}
    </update>
    
    <update id="updateStatus">
        UPDATE tb_interview
        SET 
            status = #{status},
            remarks = #{remarks},
            is_synced = 0,
            update_time = NOW()
        WHERE id = #{id}
    </update>
    
    <update id="markStatusSynced">
        UPDATE tb_interview
        SET 
            is_synced = 1,
            update_time = NOW()
        WHERE id = #{id}
    </update>
    
    <select id="findById" resultMap="ExtendedResultMap">
        SELECT 
            i.*,
            r.name AS resume_name,
            p.title AS position_name,
            c.company_name
        FROM 
            tb_interview i
            LEFT JOIN tb_resume r ON i.resume_id = r.id
            LEFT JOIN tb_job_position p ON i.position_id = p.job_id
            LEFT JOIN tb_company c ON p.company_id = c.id
        WHERE 
            i.id = #{id}
    </select>
    
    <select id="findByResumeId" resultMap="ExtendedResultMap">
        SELECT 
            i.*,
            r.name AS resume_name,
            p.title AS position_name,
            c.company_name
        FROM 
            tb_interview i
            LEFT JOIN tb_resume r ON i.resume_id = r.id
            LEFT JOIN tb_job_position p ON i.position_id = p.job_id
            LEFT JOIN tb_company c ON p.company_id = c.id
        WHERE 
            i.resume_id = #{resumeId}
        ORDER BY 
            i.create_time DESC
    </select>
    
    <select id="findByPositionId" resultMap="ExtendedResultMap">
        SELECT 
            i.*,
            r.name AS resume_name,
            p.title AS position_name,
            c.company_name
        FROM 
            tb_interview i
            LEFT JOIN tb_resume r ON i.resume_id = r.id
            LEFT JOIN tb_job_position p ON i.position_id = p.job_id
            LEFT JOIN tb_company c ON p.company_id = c.id
        WHERE 
            i.position_id = #{positionId}
        ORDER BY 
            i.create_time DESC
    </select>
    
    <select id="findPendingStatusUpdates" resultType="java.util.HashMap">
        SELECT 
            i.id AS interviewId,
            i.resume_id AS resumeId,
            i.position_id AS positionId,
            i.status,
            i.remarks,
            r.candidate_id AS candidateId
        FROM 
            tb_interview i
            JOIN tb_resume r ON i.resume_id = r.id
        WHERE 
            i.is_synced = 0
        ORDER BY 
            i.update_time DESC
        LIMIT 50
    </select>
</mapper> 