// This TypeScript modules definition file is generated by vaadin-maven-plugin.
// You can not directly import your different static files into TypeScript,
// This is needed for TypeScript compiler to declare and export as a TypeScript module.
// It is recommended to commit this file to the VCS.
// You might want to change the configurations to fit your preferences
declare module '*.css?inline' {
  import type { CSSResultGroup } from 'lit';
  const content: CSSResultGroup;
  export default content;
}

declare module 'csstype' {
  interface Properties {
    [index: `--${string}`]: any;
  }
}

declare module 'vite' {
  export interface AssetInfo {
    name: string;
    source: string | Uint8Array;
    type: string;
  }
  
  export interface ChunkInfo {
    code: string;
    dynamicImports: string[];
    exports: string[];
    facadeModuleId: string | null;
    fileName: string;
    implicitlyLoadedBefore: string[];
    imports: string[];
    isDynamicEntry: boolean;
    isEntry: boolean;
    isImplicitEntry: boolean;
    map: any;
    modules: Record<string, any>;
    name: string;
    type: string;
    viteMetadata: any;
  }
  
  export interface OutputOptions {
    dir: string;
    format: string;
    entryFileNames: string;
    chunkFileNames: string;
    assetFileNames: string;
  }
}

declare module 'rollup-plugin-brotli';
declare module 'rollup-plugin-visualizer';
declare module 'vite-plugin-checker';
declare module '@vaadin/hilla-file-router/vite-plugin.js';

declare module 'workbox-build' {
  export interface ManifestEntry {
    url: string;
    revision?: string | null;
    size?: number;
    integrity?: string;
  }

  export interface ManifestTransformResult {
    manifest: ManifestEntry[];
    warnings: string[];
  }

  export type ManifestTransform = (
    manifestEntries: ManifestEntry[]
  ) => ManifestTransformResult | Promise<ManifestTransformResult>;
  
  export function getManifest(config: any): Promise<{ 
    count: number;
    filePaths: string[];
    size: number;
    warnings: string[];
    manifestEntries: ManifestEntry[];
  }>;
}

declare global {
  interface String {
    split(separator: string): string[];
  }
}

interface PluginItem {
  visitor?: any;
  [key: string]: any;
}
